from collections import deque

goal_state = "123456780"  

moves = {
    0: [1, 3],       
    1: [0, 2, 4],
    2: [1, 5],
    3: [0, 4, 6],
    4: [1, 3, 5, 7],
    5: [2, 4, 8],
    6: [3, 7],
    7: [4, 6, 8],
    8: [5, 7]
}
def print_puzzle(state):
    for i in range(0, 9, 3):
        print(state[i], state[i+1], state[i+2])
    print()
def solve_puzzle(start_state):
    queue = deque()
    queue.append((start_state, []))  
    visited = set()

    while queue:
        state, path = queue.popleft()

        if state == goal_state:
            return path + [state]

        visited.add(state)
        zero_pos = state.index("0")

        for move in moves[zero_pos]:
            new_state = list(state)
            new_state[zero_pos], new_state[move] = new_state[move], new_state[zero_pos]
            new_state = "".join(new_state)

            if new_state not in visited:
                queue.append((new_state, path + [state]))

    return None

if __name__ == "__main__":
    start_state = "123405786"  

    print("Initial Puzzle:")
    print_puzzle(start_state)

    solution = solve_puzzle(start_state)

    if solution:
        print(f"Solution found in {len(solution) - 1} moves:\n")
        for step in solution:
            print_puzzle(step)
    else:
        print("No solution exists!")
